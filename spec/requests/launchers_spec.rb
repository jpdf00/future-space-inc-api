require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/launchers', type: :request do
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # LaunchersController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    {}
  end

  describe 'GET /index' do
    subject(:get_launchers) { get launchers_path, as: :json }

    context 'when there is data to return' do
      let!(:launchers_list) { create_list(:launcher, 10) }

      it 'renders a successful response' do
        get_launchers
        expect(response).to be_successful
      end
    end

    context 'when there is no data to return' do
      it 'renders a successful response' do
        get_launchers
        expect(response).to be_successful
      end

      it 'returns an empty array' do
        get_launchers
        expect(JSON.parse(response.body, object_class: Launcher)).to eq([])
      end
    end
  end

  describe 'GET /show' do
    let!(:launcher) { create(:launcher) }

    context 'when there is data to return' do
      subject(:get_launcher) { get "/launchers/#{launcher.id}", as: :json }

      it 'renders a successful response' do
        get_launcher
        expect(response).to be_successful
      end
    end
  end

  describe 'POST /create' do
    subject(:post_launcher) { post launchers_url }

    let(:import_data_service) { Launchers::ImportDataService }
    let(:import_data_service_double) { double(import_data_service, call: true) }

    before do
      allow(import_data_service)
        .to(receive(:new)
        .and_return(import_data_service_double))

      allow(import_data_service_double)
        .to(receive(:call)
        .and_return(true))
    end

    it 'calls import service' do
      post_launcher

      expect(import_data_service_double)
        .to(have_received(:call)
        .once)
    end

    it 'renders a JSON response' do
      post_launcher

      expect(response).to have_http_status(:ok)
      expect(JSON.parse(response.body)).to eql({ 'message' => 'Enqueued Import Jobs' })
    end
  end

  describe 'PATCH /update' do
    let!(:launcher) { create(:launcher) }

    context 'with valid parameters' do
      let(:patch_params) { attributes_for(:launcher) }
      subject(:patch_launcher) do
        patch "/launchers/#{launcher.id}",
              params: { launcher: patch_params }, as: :json
      end

      it 'does not create a new launcher' do
        expect { patch_launcher }.to change(Launcher, :count).by(0)
      end

      it 'does update a launcher' do
        patch_launcher
        expect(Launcher.find(launcher.id).created_at).not_to eq(Launcher.find(launcher.id).updated_at)
      end

      it 'renders a successful response' do
        patch_launcher
        expect(response).to be_successful
      end
    end

    context 'with invalid parameters' do
      subject(:patch_invalid_launcher) do
        patch "/launchers/#{launcher.id}",
              params: { launcher: patch_invalid_params }, as: :json
      end

      context 'with empty params' do
        subject(:patch_invalid_launcher) do
          patch "/launchers/#{launcher.id}",
                params: {}, as: :json
        end

        it 'raises ActionController::ParameterMissing' do
          expect { patch_invalid_launcher }.to raise_error(ActionController::ParameterMissing)
        end
      end
    end
  end

  describe 'DELETE /destroy' do
    let!(:launcher) { create(:launcher) }

    context 'when there is data to delete' do
      subject(:delete_launcher) { delete "/launchers/#{launcher.id}", as: :json }

      it 'renders a successful response' do
        delete_launcher
        expect(response).to be_successful
      end

      it 'returns a blank body' do
        delete_launcher
        expect(response.body).to eq('')
      end
    end

    context 'when there is no data to delete' do
      subject(:delete_launcher) { delete '/launchers/839d5ba7-6086-4521-a034-f99e7752b063', as: :json }

      it 'raises ActiveRecord::RecordNotFound' do
        expect { delete_launcher }.to raise_error(ActiveRecord::RecordNotFound)
      end
    end
  end
end
